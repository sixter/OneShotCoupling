A
chol(A)
1-cov^2-(cov - cov^2)^2/(1-cov^2)
A.chol <- chol(A)
t(A.chol) %*% A.chol
A.chol[d,d]
library(lessR)
# Returns the TV bound between two AR normal processes of X_N+1 = 0.5X_n + sqrt(3/4)Y, Cov(Y)=M
# X0, Y0 = vector of initial values
# M = covariance matrix
# k = iterations
getBound <- function(k, M, X0, Y0){
d <- length(X0)
e <- matrix(rep(0,d*length(k)), ncol = length(k))
for (i in 1:d){
x0 <- X0[i]
y0 <- Y0[i]
cov <- getCov(i, M)
e[i,] <- getE(k-i+1, cov, x0, y0)
}
bound <- 1-apply(e, 2, prod)
return(bound)
}
# Returns the coupling bound when
getE <- function(k, cov, x0, y0){
q <- -2^(-k+2)*abs(x0-y0)/sqrt(0.75*cov)
e <- 2*pnorm(q)
return(e)
}
# Input covariance matrix M and index i returns a_d when
# X_in = a1 Z_1n + a2 Z_2n + ... + ad Z_dn
getCov <- function(i, M){
d <- dim(M)[2]
sequence <- 1:d
M <- corReorder(M, vars=c(sequence[-i],i))
M.chol <- chol(M)
cov <- M.chol[d,d]
return(cov)
}
d <- 3
k <- 1:100
M <- matrix(rep(0.5, d^2), nrow= d)
diag(M) <- 1
colnames(M) <- c("V1", "V2", "V3")
rownames(M) <- colnames(M)
X0 <- c(1,2,3)
Y0 <- c(6,5,4)
# Upper bound for sample AR normal process
bound <- getBound(k, M, X0, Y0)
df <- data.frame(k, bound)
df %>%
filter(k>0) %>%
ggplot(aes(x=k, y=bound)) +
geom_line() +
labs(title = "Upper bound on the TV distance of two AR normal processes", subtitle = "When the dim = 3, corr_ij = 0.5",
y = "Upper bound on TV distance", x = "iteration")
# Input values for sample AR normal process
mycor <- matrix(nrow=6, ncol=6, byrow=TRUE,
c(1.000,0.480,0.320,0.192,0.144,0.096,
0.480,1.000,0.240,0.144,0.108,0.072,
0.320,0.240,1.000,0.096,0.072,0.048,
0.192,0.144,0.096,1.000,0.480,0.320,
0.144,0.108,0.072,0.480,1.000,0.240,
0.096,0.072,0.048,0.320,0.240,1.000))
colnames(mycor) <- c("V1", "V2", "V3", "V4", "V5", "V6")
rownames(mycor) <- colnames(mycor)
k <- 1:100
M <- mycor
X0 <- c(1,2,3,4,5,6)
Y0 <- c(6,5,4,3,2,1)
# Upper bound for sample AR normal process
bound <- getBound(k, mycor, X0, Y0)
df <- data.frame(k, bound)
df %>%
filter(k>0) %>%
ggplot(aes(x=k, y=bound)) +
geom_line() +
labs(title = "Upper bound on the TV distance of two AR normal processes", subtitle = "When the dim = 6",
y = "Upper bound on TV distance", x = "iteration")
d <- 10
k <- 1:10
M <- matrix(rep(0.5, d^2), nrow= d)
diag(M) <- 1
colnames(M) <- paste(1:d)
rownames(M) <- colnames(M)
X0 <- c(1,2,3)
Y0 <- c(6,5,4)
X0 <- 1*rep(1,d)
Y0 <- 1.5*rep(1,d)
bound <- getBound(k, M, X0, Y0)
bound
dim <- 10:50
it <- 2*dim
bound <- it
for (j in 1:length(it)){
M <- matrix(rep(0.5, dim[j]^2), nrow= dim[j])
diag(M) <- 1
colnames(M) <- paste(1:dim[j])
rownames(M) <- colnames(M)
X0 <- 1*rep(1,dim[j])
Y0 <- (1/d)*rep(1,dim[j])
bound[j] <- getBound(it[j], M, X0, Y0)
}
bound
# Upper bound for sample AR normal process when iteration=dimension
df <- data.frame(k=it, bound)
df %>%
filter(k>0) %>%
ggplot(aes(x=k, y=bound)) +
geom_line() +
labs(title = "Upper bound on the TV distance of two AR normal processes", subtitle = "When the dim = iteration/2, corr_ij = 0.5, ||x_0-y_0||=1",
y = "Upper bound on TV distance", x = "iteration")
#library(lessR)
# Returns the TV bound between two AR normal processes of X_N+1 = 0.5X_n + sqrt(3/4)Y, Cov(Y)=M
# X0, Y0 = vector of initial values
# M = covariance matrix
# k = iterations
getBound <- function(k, M, X0, Y0){
d <- length(X0)
e <- matrix(rep(0,d*length(k)), ncol = length(k))
A <- t(chol(M)) #A = D + L where D is a diagonal matrix, L a lower triangular matrix (with zeros along diagonal)
D <- diag(diag(A), nrow=d, ncol=d) # D provides the variances for each coordinate
m <- getm(A, D, d) # m provides the mean for each coordinate
for (i in 1:d){
e[i,] <- getE(k, i, m, D)
}
bound <- 1-apply(e, 2, prod)
return(bound)
}
# Returns the coupling bound when
getE <- function(k, i, m, D){
q <- -2^(-k)*abs(m[i])/(sqrt(3)*D[i,i])
e <- 2*pnorm(q)
return(e)
}
getm <- function(A, D, d){
L <- A-D
MM <- L %*% inv(A)
m <- (diag(d)-MM) %*% (X0-Y0)
return(m)
}
d <- 2
k <- 1:10
M <- matrix(rep(0.5, d^2), nrow= d)
diag(M) <- 1
colnames(M) <- c("V1", "V2")
rownames(M) <- colnames(M)
X0 <- c(1,2)
Y0 <- c(6,5)
X0 <- c(1,2,3)
Y0 <- c(6,5,4)
k <- 1:10
e1 <- 2*pnorm(-5/(2^k*sqrt(3)))
e2 <- 2*pnorm(-0.5/(2^k*sqrt(2.25)))
e3 <- 2*pnorm(-5/(3*2^k*sqrt(2)))
1-e1*e2*e3
# Upper bound for sample AR normal process
bound <- getBound(k, M, X0, Y0)
d <- length(X0)
e <- matrix(rep(0,d*length(k)), ncol = length(k))
A <- t(chol(M)) #A = D + L where D is a diagonal matrix, L a lower triangular matrix (with zeros along diagonal)
D <- diag(diag(A), nrow=d, ncol=d) # D provides the variances for each coordinate
m <- getm(A, D, d) # m provides the mean for each coordinate
d <- 2
M <- matrix(rep(0.5, d^2), nrow= d)
diag(M) <- 1
A2 <- t(chol(M))
D2 <- diag(diag(A2), nrow=d, ncol=d) # D provides the variances for each coordinate
#m2 <- getm(A2, D2, d)
d <- 3
M <- matrix(rep(0.5, d^2), nrow= d)
diag(M) <- 1
A3 <- t(chol(M))
D3 <- diag(diag(A3), nrow=d, ncol=d) # D provides the variances for each coordinate
m3 <- getm(A3, D3, d)
A2
A3
L <- A3-D3
MM <- L %*% inv(A3)
(diag(d)-MM)
X0
Y0
# getBound <- function(k, M, X0, Y0){
#   d <- length(X0)
#   e <- matrix(rep(0,d*length(k)), ncol = length(k))
#
#   A <- t(chol(M)) #A = D + L where D is a diagonal matrix, L a lower triangular matrix (with zeros along diagonal)
#   D <- diag(diag(A), nrow=d, ncol=d) # D provides the variances for each coordinate
#   m <- getm(A, D, d) # m provides the mean for each coordinate
#   for (i in 1:d){
#     e[i,] <- getE(k, i, m, D)
#   }
#   bound <- 1-apply(e, 2, prod)
#   return(bound)
# }
#
# # Returns the coupling bound when
# getE <- function(k, i, m, D){
#   q <- -2^(-k)*abs(m[i])/(sqrt(3)*D[i,i])
#   e <- 2*pnorm(q)
#   return(e)
# }
#
# getm <- function(A, D, d){
#   L <- A-D
#   MM <- L %*% inv(A)
#   m <- (diag(d)-MM) %*% (X0-Y0)
#   return(m)
# }
d <- 3
k <- 1:10
M <- matrix(rep(0.5, d^2), nrow= d)
diag(M) <- 1
colnames(M) <- c("V1", "V2", "V3")
rownames(M) <- colnames(M)
X0 <- c(1,2,3)
Y0 <- c(6,5,4)
# Upper bound for sample AR normal process
bound <- getBound(k, M, X0, Y0)
df <- data.frame(k, bound)
df %>%
filter(k>0) %>%
ggplot(aes(x=k, y=bound)) +
geom_line() +
labs(title = "Upper bound on the TV distance of two AR normal processes", subtitle = "When the dim = 3, corr_ij = 0.5",
y = "Upper bound on TV distance", x = "iteration")
# dimension <- 2:1000 # dimension of matrix
# n <- rep(2,1001) # minimum number of iterations needed to get TV less than 0.01
# th <- 0.01
# for(di in dimension){
#   k <- n[di]
#   bound <- 1
#   while(bound > th){
#     k <- k+1
#     M <- matrix(rep(0.5, di^2), nrow= di)
#     diag(M) <- 1
#     X0 <- rep(0,di)
#     Y0 <- rep(1/sqrt(di),di) # |X0-Y0| = 1
#     bound <- getBound(k, M, X0, Y0)
#   }
#   n[di] <- k
#   n[di+1] <- k-1
# }
d <- c(2,10,50, 100)
k <- 1:25
bound <- matrix(0, nrow = length(k), ncol = length(d))
for(i in 1:length(d)){
M <- matrix(rep(0.5, d[i]^2), nrow= d[i])
diag(M) <- 1
X0 <- rep(0,d[i])
Y0 <- rep(1,d[i]) # |X0-Y0| = 1
bound[,i] <- getBound(k, M, X0, Y0)
}
df <- data.frame(k, bound)
colnames(df) <- c("iteration", d)
df %>%
pivot_longer(cols = -iteration, names_to = "dimension", values_to = "bound") %>%
ggplot(aes(x=iteration, y=bound, col=dimension)) +
geom_line() +
labs(title = "Upper bound on the total variation distance for an AR normal process", subtitle = "Over varying dimensions",
y = "Total variation distance", x = "Number of iterations")
bound
m <- function(t, mu, sigma){
return(exp(mu*t + sigma^2*t^2/2))
}
N <- 100
mu = 0.5
sigma = 0.01
K <- 10
d <- 10
bound = 1:N
bound[1] = m(K*d,mu, sigma)
for (i in 2:N){
bound[i] = m(log(bound[i-1]),mu, sigma)
}
t <- K*d
t
mu*t + sigma^2*t^2/2
plot(bound[20:N], type="l")
library(bayesAB)
plotInvGamma(2, 100)
plotInvGamma(2, 10)
plotInvGamma(2, 0.1)
library(invgamma)
library(invgamma)
x <- seq(0.01, 100, length=1000)
fx1 <- dinvgamma(x, shape=100, rate=100)
fx10 <- dinvgamma(x, shape=100, rate=1000)
fx100 <- dinvgamma(x, shape=100, rate=10000)
df <- data.frame(x, fx1, fx10, fx100)
df %>%
select(x, fx10, fx100) %>%
pivot_longer(cols = starts_with("fx"), names_to = "rate", values_to = "density") %>%
ggplot(aes(x=x, y=density, col=rate)) +
geom_line()+
labs(title="Inverse gamma density for different rates", subtitle = "For fixed shape = 100")
df %>%
pivot_longer(y:z,names_to = "pdf", values_to = "density")
x <- seq(-5, 8, length=1000)
dens0 <- dnorm(x, 0, 1)
dens2 <- dnorm(x, 2, 1)
cum0 <- cumsum(dens0)
cum2 <- cumsum(dens2)
df <- data.frame(x, dens0, dens2, cum0, cum2)
df %>%
select(x, dens0, dens2) %>%
pivot_longer(cols = dens0:dens2, names_to = "rate", values_to = "density") %>%
ggplot(aes(x=x, y=density, col=rate)) +
geom_line()+
geom_vline(xintercept = 1)
df %>%
select(x, cum0, cum2) %>%
pivot_longer(cols = cum0:cum2, names_to = "rate", values_to = "density") %>%
ggplot(aes(x=x, y=density, col=rate)) +
geom_line()+
geom_vline(xintercept = 1)
a <- 0.75
n <- 1000
B <- rbeta(n,a+1/2, a-1/2)
X <- rep(0,n)
Y <- rep(0,n)
X[1] <- 0.1; Y[1] <- 0.6
for (i in 2:n){
X[i] <-4*B[i]*X[i-1]*(1-X[i-1])
Y[i] <-4*B[i]*Y[i-1]*(1-Y[i-1])
}
D <- X-Y
plot(D)
a <- 0.75
n <- 1000
X <- rep(0,n)
Y <- rep(0,n)
X[1] <- 0.1; Y[1] <- 10.6
for (i in 2:n){
X[i] <-X[i-1]/2 + sin(X[i-1])/2
Y[i] <-Y[i-1]/2 + sin(Y[i-1])/2
}
D <- X-Y
plot(X)
plot(Y)
plot(D)
x <- seq(0,10,by=0.01)
p <- 1-pnorm(x, mean=5, sd=1)
a <- 10; b<-1
alg_tail <- a/(x^b)
plot(x,alg_tail,type="l",col="red")
lines(x,p,col="green")
Z <- rexp(10000)
X0 <- 3
X <- Z
X[1] <- X0
for(i in 2:length(Z)){
X[i] <- 0.5*X[i-1] + Z[i]+ 3
}
hist(X)
x0=1
y0=0
n = 15
actualBound = 1:n; upperBound = 1:n
for(i in 1:n){
actualBound[i] <- 1-2*pnorm(-abs(x0-y0)/(2*sqrt(4^i-1)))
#actualBound[i] <- 1-2*pnorm(-2^(-i-1)*abs(x0-y0)*(1-4^(-i))^(-0.5))
upperBound[i] <- sqrt(2/(3*pi))*abs(x0-y0)/2^i
}
df <- data.frame(Iteration=1:n, Actual=actualBound, Estimate=upperBound)
df %>%
pivot_longer(cols = Actual:Estimate, names_to = "Bound", values_to = "value") %>%
ggplot(aes(x=Iteration, y=value, col=Bound)) +
geom_line()+
geom_point() +
labs(fill = "Bound", y="Total Variation", title = "Upper bound vs actual total variation distance", subtitle = "For the autoregressive normal process") +
theme(legend.position = "bottom")
actualBound
upperBound
df
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(matlib)
d <- 100
n <- 2*log(0.01/(d*sqrt(2/(3*pi))))/log(0.5)
n
diag(0.5)
d <- 10
diag(0.5, nrow=10)
d <- 10
diag(0.5, nrow=10)
m <- matrix(0,d,d)
diag(m[-1,])<-0.125
d <- 10
diag(0.5, nrow=10)
m <- matrix(0,d,d)
diag(m[-1,])<-0.125
diag(m[1,])<-0.125
d <- 10
#diag(0.5, nrow=10)
m <- matrix(0,d,d)
diag(m[-1,])<-0.125
m
d <- 10
#diag(0.5, nrow=10)
m <- matrix(0,d,d)
diag(m[-1,])<-0.125
diag(m[-d,])<-0.125
diag(m)<-0.5
d <- 10
#diag(0.5, nrow=10)
m <- matrix(0,d,d)
diag(m[-1,])<-0.125
diag(m[-d,])<-0.125
diag(m)<-0.5
m
diag(m[-d,])
m[-1,]
m[-d,]
m[,-1]
d <- 10
#diag(0.5, nrow=10)
m <- matrix(0,d,d)
diag(m[-1,])<-0.125
diag(m[,-1])<-0.125
diag(m)<-0.5
m
eigen(M)
eigen(m)
d <- 5
#diag(0.5, nrow=10)
m <- matrix(0,d,d)
diag(m[-1,])<-0.125
diag(m[,-1])<-0.125
diag(m)<-0.5
sigma <- m
A <- m
eigen(m)
eigenM <- eigen(m)
D <- diag(eigenM$values)
P <- eigenM$vectors
P %*% D %*% inv(P)
rep(1, 3)
d <- 5
#diag(0.5, nrow=10)
X <- rep(1, d)
Y <- rep(0, d)
m <- matrix(0,d,d)
diag(m[-1,])<-0.125
diag(m[,-1])<-0.125
diag(m)<-0.5
sigma <- m
A <- m
norm(X - Y)
X
Y
norm(X)
bound <- d/sqrt(2*pi) * norm(inv(sigma), "I") * norm(P, "I") * norm(inv(P), "I") *
norm(X, "I")
sum(P)
P
P^2
max(eigenM$values)
n <- 100
bound <- d/sqrt(2*pi) * norm(inv(sigma), "F") * norm(P, "F") * norm(inv(P), "F") * sqrt(sum(X^2)) * eigenM$values^n
n <- 100
bound <- d/sqrt(2*pi) * norm(inv(sigma), "F") * norm(P, "F") * norm(inv(P), "F") * sqrt(sum(X^2)) * eigenM$values^n
bound
d/sqrt(2*pi) * norm(inv(sigma), "F") * norm(P, "F") * norm(inv(P), "F") * sqrt(sum(X^2)) * eigenM$values^n
d/sqrt(2*pi)
n <- 100
bound <- d/sqrt(2*pi) * norm(inv(sigma), "F") * norm(P, "F") * norm(inv(P), "F") * sqrt(sum(X^2)) * max(eigenM$values)^n
bound
d/sqrt(2*pi) * norm(inv(sigma), "F") * norm(P, "F") * norm(inv(P), "F") * sqrt(sum(X^2))
max(eigenM$values)
n <- 10
bound <- d/sqrt(2*pi) * norm(inv(sigma), "F") * norm(P, "F") * norm(inv(P), "F") * sqrt(sum(X^2)) * max(eigenM$values)^n
n <- 10
bound <- d/sqrt(2*pi) * norm(inv(sigma), "F") * norm(P, "F") * norm(inv(P), "F") * sqrt(sum(X^2)) * max(eigenM$values)^n
C <- d/sqrt(2*pi) * norm(inv(sigma), "F") * norm(P, "F") * norm(inv(P), "F") * sqrt(sum(X^2))
r <- max(eigenM$values)
n <- log(0.01/C)/log(r)
n
d <- 100
#diag(0.5, nrow=10)
X <- rep(1, d)
Y <- rep(0, d)
m <- matrix(0,d,d)
diag(m[-1,])<-0.125
diag(m[,-1])<-0.125
diag(m)<-0.5
sigma <- m
A <- m
eigenM <- eigen(m)
D <- diag(eigenM$values)
P <- eigenM$vectors
d <- 100
#diag(0.5, nrow=10)
X <- rep(1, d)
Y <- rep(0, d)
m <- matrix(0,d,d)
diag(m[-1,])<-0.125
diag(m[,-1])<-0.125
diag(m)<-0.5
sigma <- m
A <- m
eigenM <- eigen(m)
#D <- diag(eigenM$values)
P <- eigenM$vectors
n <- 10
bound <- d/sqrt(2*pi) * norm(inv(sigma), "F") * norm(P, "F") * norm(inv(P), "F") * sqrt(sum(X^2)) * max(eigenM$values)^n
C <- d/sqrt(2*pi) * norm(inv(sigma), "F") * norm(P, "F") * norm(inv(P), "F") * sqrt(sum(X^2))
r <- max(eigenM$values)
n <- log(0.01/C)/log(r)
C
r
n

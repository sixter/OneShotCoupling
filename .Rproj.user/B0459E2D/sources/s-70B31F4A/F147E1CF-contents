---
title: "CouplingTechniquesHighDim_V2"
author: "Sabrina Sixta"
date: "03/06/2021"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(matlib)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r}
dataPHD <- read.csv2(file="phd-delays.csv")
colnames(dataPHD) <- c("diff", "child", "sex","age","age2")
```

## Including Plots

You can also embed plots, for example:

# Bayesian regression Gibbs sampler model

```{r}
mDataPHD <- as.matrix(dataPHD)
Y <- mDataPHD[,1]
X <- mDataPHD[,-1]

#set parameters
lambda <- 2

#get variables
k <- nrow(X)
p <- ncol(X)
A <- t(X) %*% X + lambda*diag(p)
C <- t(Y) %*% (diag(k)-X %*% inv(A) %*% t(X)) %*% Y
C <- C[1,1]
K <- ((k/2+p+1)/exp(1))^(k/2+p)/gamma(k/2+p)*(k+2*p+2)/(C*exp(1))
D <- p/(k+p-2)
```

```{r}
K*1000
n <- log(0.01/(K*1000))/log(D)

```

# Bayesian location model

```{r}
data(trees)
df <- trees$Girth
```

```{r}
df
```


```{r}
j <- length(df)
S <- sum((df-mean(df))^2)
K <- ((j+1)/2)^((j-1)/2)*exp(-((j+1)/2))/((j+1)*gamma((j-1)/2))*S
```

```{r}
K*1000
D <- 1/j
n <- log(0.01/(K*1000))/log(D)
n
```
```{r}
K <- j/2 +1
K
n <- log(0.01/(K*1000))/log(D)
n
```

# Example taken from Qin & Hobert
```{r}
n <- 100000
B <- rbernoulli(n, 0.5)
C1 <- rcauchy(n, location=1)
C2 <- rcauchy(n, location=20)

W <- B*C1+(1-B)*C2
hist(W)
```
```{r}
n <- 2*log(0.01/((150+pi)/pi))/log(0.7170215)
n
```

# AR normal process with d independent coordinates

```{r}
d <- 100
n <- 2*log(0.01/(d*sqrt(2/(3*pi))))/log(0.5)
n
```

# AR normal process with d dependent coordinates

```{r}
d <- 100
#diag(0.5, nrow=10)

X <- rep(1, d)
Y <- rep(0, d)
m <- matrix(0,d,d)
diag(m[-1,])<-0.125
diag(m[,-1])<-0.125
diag(m)<-0.5
sigma <- m
A <- m

eigenM <- eigen(m)
#D <- diag(eigenM$values)
P <- eigenM$vectors
```

```{r}
n <- 10
bound <- d/sqrt(2*pi) * norm(inv(sigma), "F") * norm(P, "F") * norm(inv(P), "F") * sqrt(sum(X^2)) * max(eigenM$values)^n

C <- d/sqrt(2*pi) * norm(inv(sigma), "F") * norm(P, "F") * norm(inv(P), "F") * sqrt(sum(X^2))
r <- max(eigenM$values)
n <- log(0.01/C)/log(r)
```


